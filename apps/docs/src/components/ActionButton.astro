---
export interface Props {
  href: string;
  variant?: 'primary' | 'secondary' | 'outline';
  icon?: string;
  target?: '_blank' | '_self';
  class?: string;
}

const { href, variant = 'primary', icon, target = '_self', class: className } = Astro.props;
---

<a href={href} target={target} class={`action-button ${variant} ${className || ''}`}>
  {icon && <iconify-icon icon={icon} width="20" height="20"></iconify-icon>}
  <slot />
  {target === '_blank' && <iconify-icon icon="lucide:external-link" width="16" height="16" class="external-icon"></iconify-icon>}
</a>

<style>
.action-button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  border-radius: 0.75rem;
  font-weight: 600;
  text-decoration: none;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  border: 2px solid transparent;
}

.action-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s ease;
}

.action-button:hover::before {
  left: 100%;
}

.primary {
  background: var(--sl-color-accent);
  color: white;
}

.primary:hover {
  background: var(--sl-color-accent-high);
  transform: translateY(-2px);
  box-shadow: 0 10px 20px var(--sl-color-accent-low);
}

.secondary {
  background: var(--sl-color-gray-5);
  color: var(--sl-color-text);
}

.secondary:hover {
  background: var(--sl-color-gray-4);
  transform: translateY(-2px);
}

.outline {
  background: transparent;
  color: var(--sl-color-accent);
  border-color: var(--sl-color-accent);
}

.outline:hover {
  background: var(--sl-color-accent);
  color: white;
  transform: translateY(-2px);
}

.external-icon {
  opacity: 0.7;
}

@media (max-width: 768px) {
  .action-button {
    padding: 0.625rem 1.25rem;
    font-size: 0.875rem;
  }
}
</style>